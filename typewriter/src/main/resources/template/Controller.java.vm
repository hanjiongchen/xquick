package ${package}.modules.${moduleName}.controller;

import ${package}.common.annotation.LogOperation;
import co.xquick.booster.pojo.PageData;
import co.xquick.booster.pojo.Result;
import co.xquick.booster.validator.AssertUtils;
import co.xquick.booster.validator.ValidatorUtils;
import co.xquick.booster.validator.group.AddGroup;
import co.xquick.booster.validator.group.DefaultGroup;
import co.xquick.booster.validator.group.UpdateGroup;
import ${package}.common.util.ExcelUtils;
import ${package}.modules.${moduleName}.dto.${className}DTO;
import ${package}.modules.${moduleName}.excel.${className}Excel;
import ${package}.modules.${moduleName}.service.${className}Service;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import springfox.documentation.annotations.ApiIgnore;

import javax.servlet.http.HttpServletResponse;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

/**
 * ${comments}
 *
 * @author ${author} ${email}
 */
@RestController
@RequestMapping("${moduleName}/${pathName}")
@Api(tags="${comments}")
public class ${className}Controller {
    @Autowired
    private ${className}Service ${classname}Service;

    @GetMapping("list")
    @ApiOperation("列表")
    @ApiImplicitParams({
    })
    @RequiresPermissions("${moduleName}:${pathName}:list")
    public Result list(@ApiIgnore @RequestParam Map<String, Object> params) {
        List<${className}DTO> list = ${classname}Service.listDto(params);

        return new Result<>().ok(list);
    }

    @GetMapping("page")
    @ApiOperation("分页")
    @ApiImplicitParams({
    })
    @RequiresPermissions("${moduleName}:${pathName}:page")
    public Result page(@ApiIgnore @RequestParam Map<String, Object> params) {
        PageData<${className}DTO> page = ${classname}Service.pageDto(params);

        return new Result<>().ok(page);
    }

    @GetMapping("info")
    @ApiOperation("信息")
    @RequiresPermissions("${moduleName}:${pathName}:info")
    public Result info(@RequestParam Long id) {
        ${className}DTO data = ${classname}Service.getDtoById(id);

        return new Result<${className}DTO>().ok(data);
    }

    @PostMapping("save")
    @ApiOperation("保存")
    @LogOperation("保存")
    @RequiresPermissions("${moduleName}:${pathName}:save")
    public Result save(@RequestBody ${className}DTO dto) {
        //效验数据
        ValidatorUtils.validateEntity(dto, AddGroup.class, DefaultGroup.class);

        ${classname}Service.saveOrUpdateDto(dto);

        return new Result();
    }

    @PutMapping("update")
    @ApiOperation("修改")
    @LogOperation("修改")
    @RequiresPermissions("${moduleName}:${pathName}:update")
    public Result update(@RequestBody ${className}DTO dto) {
        //效验数据
        ValidatorUtils.validateEntity(dto, UpdateGroup.class, DefaultGroup.class);

        ${classname}Service.saveOrUpdateDto(dto);

        return new Result();
    }

    @DeleteMapping("delete")
    @ApiOperation("删除")
    @LogOperation("删除")
    @RequiresPermissions("${moduleName}:${pathName}:delete")
    public Result delete(@RequestBody List<Long> ids) {
        //效验数据
        AssertUtils.isListEmpty(ids, "id");

        ${classname}Service.deleteByIds(ids);

        return new Result();
    }

    @GetMapping("export")
    @ApiOperation("导出")
    @LogOperation("导出")
    @RequiresPermissions("${moduleName}:${pathName}:export")
    public void export(@ApiIgnore @RequestParam Map<String, Object> params, HttpServletResponse response) throws Exception {
        List<${className}DTO> list = ${classname}Service.listDto(params);

        ExcelUtils.exportExcelToTarget(response, "${comments}", list, ${className}Excel.class);
    }

}
